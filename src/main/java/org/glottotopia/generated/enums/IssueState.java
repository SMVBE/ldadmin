/**
 * This class is generated by jOOQ
 */
package org.liquidfeedback.generated.enums;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.4" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public enum IssueState implements org.jooq.EnumType {

	admission("admission"),

	discussion("discussion"),

	verification("verification"),

	voting("voting"),

	canceled_by_admin("canceled_by_admin"),

	canceled_revoked_before_accepted("canceled_revoked_before_accepted"),

	canceled_issue_not_accepted("canceled_issue_not_accepted"),

	canceled_after_revocation_during_discussion("canceled_after_revocation_during_discussion"),

	canceled_after_revocation_during_verification("canceled_after_revocation_during_verification"),

	canceled_no_initiative_admitted("canceled_no_initiative_admitted"),

	finished_without_winner("finished_without_winner"),

	finished_with_winner("finished_with_winner");

	private final java.lang.String literal;

	private IssueState(java.lang.String literal) {
		this.literal = literal;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Schema getSchema() {
		return org.liquidfeedback.generated.DefaultSchema.DEFAULT_SCHEMA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String getName() {
		return "issue_state";
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String getLiteral() {
		return literal;
	}
}
