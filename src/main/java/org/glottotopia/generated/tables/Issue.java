/**
 * This class is generated by jOOQ
 */
package org.liquidfeedback.generated.tables;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.4" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issue extends org.jooq.impl.TableImpl<org.liquidfeedback.generated.tables.records.IssueRecord> {

	private static final long serialVersionUID = -1381695652;

	/**
	 * The singleton instance of <code>issue</code>
	 */
	public static final org.liquidfeedback.generated.tables.Issue ISSUE = new org.liquidfeedback.generated.tables.Issue();

	/**
	 * The class holding records for this type
	 */
	@Override
	public java.lang.Class<org.liquidfeedback.generated.tables.records.IssueRecord> getRecordType() {
		return org.liquidfeedback.generated.tables.records.IssueRecord.class;
	}

	/**
	 * The column <code>issue.id</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>issue.area_id</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> AREA_ID = createField("area_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>issue.policy_id</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> POLICY_ID = createField("policy_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>issue.admin_notice</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.String> ADMIN_NOTICE = createField("admin_notice", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>issue.state</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, org.liquidfeedback.generated.enums.IssueState> STATE = createField("state", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(org.liquidfeedback.generated.enums.IssueState.class), this, "");

	/**
	 * The column <code>issue.phase_finished</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> PHASE_FINISHED = createField("phase_finished", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.created</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>issue.accepted</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> ACCEPTED = createField("accepted", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.half_frozen</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> HALF_FROZEN = createField("half_frozen", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.fully_frozen</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> FULLY_FROZEN = createField("fully_frozen", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.closed</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> CLOSED = createField("closed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.cleaned</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> CLEANED = createField("cleaned", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.admission_time</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Object> ADMISSION_TIME = createField("admission_time", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

	/**
	 * The column <code>issue.discussion_time</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Object> DISCUSSION_TIME = createField("discussion_time", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

	/**
	 * The column <code>issue.verification_time</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Object> VERIFICATION_TIME = createField("verification_time", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

	/**
	 * The column <code>issue.voting_time</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Object> VOTING_TIME = createField("voting_time", org.jooq.impl.DefaultDataType.getDefaultDataType("interval"), this, "");

	/**
	 * The column <code>issue.snapshot</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.sql.Timestamp> SNAPSHOT = createField("snapshot", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>issue.latest_snapshot_event</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, org.liquidfeedback.generated.enums.SnapshotEvent> LATEST_SNAPSHOT_EVENT = createField("latest_snapshot_event", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(org.liquidfeedback.generated.enums.SnapshotEvent.class), this, "");

	/**
	 * The column <code>issue.population</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> POPULATION = createField("population", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>issue.voter_count</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> VOTER_COUNT = createField("voter_count", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>issue.status_quo_schulze_rank</code>.
	 */
	public final org.jooq.TableField<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> STATUS_QUO_SCHULZE_RANK = createField("status_quo_schulze_rank", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>issue</code> table reference
	 */
	public Issue() {
		this("issue", null);
	}

	/**
	 * Create an aliased <code>issue</code> table reference
	 */
	public Issue(java.lang.String alias) {
		this(alias, org.liquidfeedback.generated.tables.Issue.ISSUE);
	}

	private Issue(java.lang.String alias, org.jooq.Table<org.liquidfeedback.generated.tables.records.IssueRecord> aliased) {
		this(alias, aliased, null);
	}

	private Issue(java.lang.String alias, org.jooq.Table<org.liquidfeedback.generated.tables.records.IssueRecord> aliased, org.jooq.Field<?>[] parameters) {
		super(alias, org.liquidfeedback.generated.DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Identity<org.liquidfeedback.generated.tables.records.IssueRecord, java.lang.Integer> getIdentity() {
		return org.liquidfeedback.generated.Keys.IDENTITY_ISSUE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.UniqueKey<org.liquidfeedback.generated.tables.records.IssueRecord> getPrimaryKey() {
		return org.liquidfeedback.generated.Keys.ISSUE_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.UniqueKey<org.liquidfeedback.generated.tables.records.IssueRecord>> getKeys() {
		return java.util.Arrays.<org.jooq.UniqueKey<org.liquidfeedback.generated.tables.records.IssueRecord>>asList(org.liquidfeedback.generated.Keys.ISSUE_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.util.List<org.jooq.ForeignKey<org.liquidfeedback.generated.tables.records.IssueRecord, ?>> getReferences() {
		return java.util.Arrays.<org.jooq.ForeignKey<org.liquidfeedback.generated.tables.records.IssueRecord, ?>>asList(org.liquidfeedback.generated.Keys.ISSUE__ISSUE_AREA_ID_FKEY, org.liquidfeedback.generated.Keys.ISSUE__ISSUE_POLICY_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.liquidfeedback.generated.tables.Issue as(java.lang.String alias) {
		return new org.liquidfeedback.generated.tables.Issue(alias, this);
	}

	/**
	 * Rename this table
	 */
	public org.liquidfeedback.generated.tables.Issue rename(java.lang.String name) {
		return new org.liquidfeedback.generated.tables.Issue(name, null);
	}
}
