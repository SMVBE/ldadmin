/**
 * This class is generated by jOOQ
 */
package org.liquidfeedback.generated.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.4" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContingentRecord extends org.jooq.impl.UpdatableRecordImpl<org.liquidfeedback.generated.tables.records.ContingentRecord> implements org.jooq.Record4<java.lang.Boolean, java.lang.Object, java.lang.Integer, java.lang.Integer>, org.liquidfeedback.generated.tables.interfaces.IContingent {

	private static final long serialVersionUID = -1226072413;

	/**
	 * Setter for <code>contingent.polling</code>.
	 */
	public void setPolling(java.lang.Boolean value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>contingent.polling</code>.
	 */
	@Override
	public java.lang.Boolean getPolling() {
		return (java.lang.Boolean) getValue(0);
	}

	/**
	 * Setter for <code>contingent.time_frame</code>.
	 */
	public void setTimeFrame(java.lang.Object value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>contingent.time_frame</code>.
	 */
	@Override
	public java.lang.Object getTimeFrame() {
		return (java.lang.Object) getValue(1);
	}

	/**
	 * Setter for <code>contingent.text_entry_limit</code>.
	 */
	public void setTextEntryLimit(java.lang.Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>contingent.text_entry_limit</code>.
	 */
	@Override
	public java.lang.Integer getTextEntryLimit() {
		return (java.lang.Integer) getValue(2);
	}

	/**
	 * Setter for <code>contingent.initiative_limit</code>.
	 */
	public void setInitiativeLimit(java.lang.Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>contingent.initiative_limit</code>.
	 */
	@Override
	public java.lang.Integer getInitiativeLimit() {
		return (java.lang.Integer) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Record2<java.lang.Boolean, java.lang.Object> key() {
		return (org.jooq.Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row4<java.lang.Boolean, java.lang.Object, java.lang.Integer, java.lang.Integer> fieldsRow() {
		return (org.jooq.Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row4<java.lang.Boolean, java.lang.Object, java.lang.Integer, java.lang.Integer> valuesRow() {
		return (org.jooq.Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Boolean> field1() {
		return org.liquidfeedback.generated.tables.Contingent.CONTINGENT.POLLING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Object> field2() {
		return org.liquidfeedback.generated.tables.Contingent.CONTINGENT.TIME_FRAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field3() {
		return org.liquidfeedback.generated.tables.Contingent.CONTINGENT.TEXT_ENTRY_LIMIT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field4() {
		return org.liquidfeedback.generated.tables.Contingent.CONTINGENT.INITIATIVE_LIMIT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Boolean value1() {
		return getPolling();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Object value2() {
		return getTimeFrame();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value3() {
		return getTextEntryLimit();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value4() {
		return getInitiativeLimit();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContingentRecord value1(java.lang.Boolean value) {
		setPolling(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContingentRecord value2(java.lang.Object value) {
		setTimeFrame(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContingentRecord value3(java.lang.Integer value) {
		setTextEntryLimit(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContingentRecord value4(java.lang.Integer value) {
		setInitiativeLimit(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContingentRecord values(java.lang.Boolean value1, java.lang.Object value2, java.lang.Integer value3, java.lang.Integer value4) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ContingentRecord
	 */
	public ContingentRecord() {
		super(org.liquidfeedback.generated.tables.Contingent.CONTINGENT);
	}

	/**
	 * Create a detached, initialised ContingentRecord
	 */
	public ContingentRecord(java.lang.Boolean polling, java.lang.Object timeFrame, java.lang.Integer textEntryLimit, java.lang.Integer initiativeLimit) {
		super(org.liquidfeedback.generated.tables.Contingent.CONTINGENT);

		setValue(0, polling);
		setValue(1, timeFrame);
		setValue(2, textEntryLimit);
		setValue(3, initiativeLimit);
	}
}
