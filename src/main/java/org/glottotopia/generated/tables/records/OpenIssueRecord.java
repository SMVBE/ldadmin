/**
 * This class is generated by jOOQ
 */
package org.liquidfeedback.generated.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.4" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OpenIssueRecord extends org.jooq.impl.TableRecordImpl<org.liquidfeedback.generated.tables.records.OpenIssueRecord> implements org.jooq.Record21<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, org.liquidfeedback.generated.enums.IssueState, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.sql.Timestamp, org.liquidfeedback.generated.enums.SnapshotEvent, java.lang.Integer, java.lang.Integer, java.lang.Integer>, org.liquidfeedback.generated.tables.interfaces.IOpenIssue {

	private static final long serialVersionUID = 835750191;

	/**
	 * Setter for <code>open_issue.id</code>.
	 */
	public void setId(java.lang.Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>open_issue.id</code>.
	 */
	@Override
	public java.lang.Integer getId() {
		return (java.lang.Integer) getValue(0);
	}

	/**
	 * Setter for <code>open_issue.area_id</code>.
	 */
	public void setAreaId(java.lang.Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>open_issue.area_id</code>.
	 */
	@Override
	public java.lang.Integer getAreaId() {
		return (java.lang.Integer) getValue(1);
	}

	/**
	 * Setter for <code>open_issue.policy_id</code>.
	 */
	public void setPolicyId(java.lang.Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>open_issue.policy_id</code>.
	 */
	@Override
	public java.lang.Integer getPolicyId() {
		return (java.lang.Integer) getValue(2);
	}

	/**
	 * Setter for <code>open_issue.admin_notice</code>.
	 */
	public void setAdminNotice(java.lang.String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>open_issue.admin_notice</code>.
	 */
	@Override
	public java.lang.String getAdminNotice() {
		return (java.lang.String) getValue(3);
	}

	/**
	 * Setter for <code>open_issue.state</code>.
	 */
	public void setState(org.liquidfeedback.generated.enums.IssueState value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>open_issue.state</code>.
	 */
	@Override
	public org.liquidfeedback.generated.enums.IssueState getState() {
		return (org.liquidfeedback.generated.enums.IssueState) getValue(4);
	}

	/**
	 * Setter for <code>open_issue.phase_finished</code>.
	 */
	public void setPhaseFinished(java.sql.Timestamp value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>open_issue.phase_finished</code>.
	 */
	@Override
	public java.sql.Timestamp getPhaseFinished() {
		return (java.sql.Timestamp) getValue(5);
	}

	/**
	 * Setter for <code>open_issue.created</code>.
	 */
	public void setCreated(java.sql.Timestamp value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>open_issue.created</code>.
	 */
	@Override
	public java.sql.Timestamp getCreated() {
		return (java.sql.Timestamp) getValue(6);
	}

	/**
	 * Setter for <code>open_issue.accepted</code>.
	 */
	public void setAccepted(java.sql.Timestamp value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>open_issue.accepted</code>.
	 */
	@Override
	public java.sql.Timestamp getAccepted() {
		return (java.sql.Timestamp) getValue(7);
	}

	/**
	 * Setter for <code>open_issue.half_frozen</code>.
	 */
	public void setHalfFrozen(java.sql.Timestamp value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>open_issue.half_frozen</code>.
	 */
	@Override
	public java.sql.Timestamp getHalfFrozen() {
		return (java.sql.Timestamp) getValue(8);
	}

	/**
	 * Setter for <code>open_issue.fully_frozen</code>.
	 */
	public void setFullyFrozen(java.sql.Timestamp value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>open_issue.fully_frozen</code>.
	 */
	@Override
	public java.sql.Timestamp getFullyFrozen() {
		return (java.sql.Timestamp) getValue(9);
	}

	/**
	 * Setter for <code>open_issue.closed</code>.
	 */
	public void setClosed(java.sql.Timestamp value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>open_issue.closed</code>.
	 */
	@Override
	public java.sql.Timestamp getClosed() {
		return (java.sql.Timestamp) getValue(10);
	}

	/**
	 * Setter for <code>open_issue.cleaned</code>.
	 */
	public void setCleaned(java.sql.Timestamp value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>open_issue.cleaned</code>.
	 */
	@Override
	public java.sql.Timestamp getCleaned() {
		return (java.sql.Timestamp) getValue(11);
	}

	/**
	 * Setter for <code>open_issue.admission_time</code>.
	 */
	public void setAdmissionTime(java.lang.Object value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>open_issue.admission_time</code>.
	 */
	@Override
	public java.lang.Object getAdmissionTime() {
		return (java.lang.Object) getValue(12);
	}

	/**
	 * Setter for <code>open_issue.discussion_time</code>.
	 */
	public void setDiscussionTime(java.lang.Object value) {
		setValue(13, value);
	}

	/**
	 * Getter for <code>open_issue.discussion_time</code>.
	 */
	@Override
	public java.lang.Object getDiscussionTime() {
		return (java.lang.Object) getValue(13);
	}

	/**
	 * Setter for <code>open_issue.verification_time</code>.
	 */
	public void setVerificationTime(java.lang.Object value) {
		setValue(14, value);
	}

	/**
	 * Getter for <code>open_issue.verification_time</code>.
	 */
	@Override
	public java.lang.Object getVerificationTime() {
		return (java.lang.Object) getValue(14);
	}

	/**
	 * Setter for <code>open_issue.voting_time</code>.
	 */
	public void setVotingTime(java.lang.Object value) {
		setValue(15, value);
	}

	/**
	 * Getter for <code>open_issue.voting_time</code>.
	 */
	@Override
	public java.lang.Object getVotingTime() {
		return (java.lang.Object) getValue(15);
	}

	/**
	 * Setter for <code>open_issue.snapshot</code>.
	 */
	public void setSnapshot(java.sql.Timestamp value) {
		setValue(16, value);
	}

	/**
	 * Getter for <code>open_issue.snapshot</code>.
	 */
	@Override
	public java.sql.Timestamp getSnapshot() {
		return (java.sql.Timestamp) getValue(16);
	}

	/**
	 * Setter for <code>open_issue.latest_snapshot_event</code>.
	 */
	public void setLatestSnapshotEvent(org.liquidfeedback.generated.enums.SnapshotEvent value) {
		setValue(17, value);
	}

	/**
	 * Getter for <code>open_issue.latest_snapshot_event</code>.
	 */
	@Override
	public org.liquidfeedback.generated.enums.SnapshotEvent getLatestSnapshotEvent() {
		return (org.liquidfeedback.generated.enums.SnapshotEvent) getValue(17);
	}

	/**
	 * Setter for <code>open_issue.population</code>.
	 */
	public void setPopulation(java.lang.Integer value) {
		setValue(18, value);
	}

	/**
	 * Getter for <code>open_issue.population</code>.
	 */
	@Override
	public java.lang.Integer getPopulation() {
		return (java.lang.Integer) getValue(18);
	}

	/**
	 * Setter for <code>open_issue.voter_count</code>.
	 */
	public void setVoterCount(java.lang.Integer value) {
		setValue(19, value);
	}

	/**
	 * Getter for <code>open_issue.voter_count</code>.
	 */
	@Override
	public java.lang.Integer getVoterCount() {
		return (java.lang.Integer) getValue(19);
	}

	/**
	 * Setter for <code>open_issue.status_quo_schulze_rank</code>.
	 */
	public void setStatusQuoSchulzeRank(java.lang.Integer value) {
		setValue(20, value);
	}

	/**
	 * Getter for <code>open_issue.status_quo_schulze_rank</code>.
	 */
	@Override
	public java.lang.Integer getStatusQuoSchulzeRank() {
		return (java.lang.Integer) getValue(20);
	}

	// -------------------------------------------------------------------------
	// Record21 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row21<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, org.liquidfeedback.generated.enums.IssueState, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.sql.Timestamp, org.liquidfeedback.generated.enums.SnapshotEvent, java.lang.Integer, java.lang.Integer, java.lang.Integer> fieldsRow() {
		return (org.jooq.Row21) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Row21<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, org.liquidfeedback.generated.enums.IssueState, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.sql.Timestamp, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.sql.Timestamp, org.liquidfeedback.generated.enums.SnapshotEvent, java.lang.Integer, java.lang.Integer, java.lang.Integer> valuesRow() {
		return (org.jooq.Row21) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field1() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field2() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.AREA_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field3() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.POLICY_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.String> field4() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.ADMIN_NOTICE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<org.liquidfeedback.generated.enums.IssueState> field5() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.STATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field6() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.PHASE_FINISHED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field7() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.CREATED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field8() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.ACCEPTED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field9() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.HALF_FROZEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field10() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.FULLY_FROZEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field11() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.CLOSED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field12() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.CLEANED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Object> field13() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.ADMISSION_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Object> field14() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.DISCUSSION_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Object> field15() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.VERIFICATION_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Object> field16() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.VOTING_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.sql.Timestamp> field17() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.SNAPSHOT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<org.liquidfeedback.generated.enums.SnapshotEvent> field18() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.LATEST_SNAPSHOT_EVENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field19() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.POPULATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field20() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.VOTER_COUNT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Field<java.lang.Integer> field21() {
		return org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE.STATUS_QUO_SCHULZE_RANK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value2() {
		return getAreaId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value3() {
		return getPolicyId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.String value4() {
		return getAdminNotice();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.liquidfeedback.generated.enums.IssueState value5() {
		return getState();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value6() {
		return getPhaseFinished();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value7() {
		return getCreated();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value8() {
		return getAccepted();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value9() {
		return getHalfFrozen();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value10() {
		return getFullyFrozen();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value11() {
		return getClosed();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value12() {
		return getCleaned();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Object value13() {
		return getAdmissionTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Object value14() {
		return getDiscussionTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Object value15() {
		return getVerificationTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Object value16() {
		return getVotingTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.sql.Timestamp value17() {
		return getSnapshot();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.liquidfeedback.generated.enums.SnapshotEvent value18() {
		return getLatestSnapshotEvent();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value19() {
		return getPopulation();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value20() {
		return getVoterCount();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public java.lang.Integer value21() {
		return getStatusQuoSchulzeRank();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value1(java.lang.Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value2(java.lang.Integer value) {
		setAreaId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value3(java.lang.Integer value) {
		setPolicyId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value4(java.lang.String value) {
		setAdminNotice(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value5(org.liquidfeedback.generated.enums.IssueState value) {
		setState(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value6(java.sql.Timestamp value) {
		setPhaseFinished(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value7(java.sql.Timestamp value) {
		setCreated(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value8(java.sql.Timestamp value) {
		setAccepted(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value9(java.sql.Timestamp value) {
		setHalfFrozen(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value10(java.sql.Timestamp value) {
		setFullyFrozen(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value11(java.sql.Timestamp value) {
		setClosed(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value12(java.sql.Timestamp value) {
		setCleaned(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value13(java.lang.Object value) {
		setAdmissionTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value14(java.lang.Object value) {
		setDiscussionTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value15(java.lang.Object value) {
		setVerificationTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value16(java.lang.Object value) {
		setVotingTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value17(java.sql.Timestamp value) {
		setSnapshot(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value18(org.liquidfeedback.generated.enums.SnapshotEvent value) {
		setLatestSnapshotEvent(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value19(java.lang.Integer value) {
		setPopulation(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value20(java.lang.Integer value) {
		setVoterCount(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord value21(java.lang.Integer value) {
		setStatusQuoSchulzeRank(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OpenIssueRecord values(java.lang.Integer value1, java.lang.Integer value2, java.lang.Integer value3, java.lang.String value4, org.liquidfeedback.generated.enums.IssueState value5, java.sql.Timestamp value6, java.sql.Timestamp value7, java.sql.Timestamp value8, java.sql.Timestamp value9, java.sql.Timestamp value10, java.sql.Timestamp value11, java.sql.Timestamp value12, java.lang.Object value13, java.lang.Object value14, java.lang.Object value15, java.lang.Object value16, java.sql.Timestamp value17, org.liquidfeedback.generated.enums.SnapshotEvent value18, java.lang.Integer value19, java.lang.Integer value20, java.lang.Integer value21) {
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached OpenIssueRecord
	 */
	public OpenIssueRecord() {
		super(org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE);
	}

	/**
	 * Create a detached, initialised OpenIssueRecord
	 */
	public OpenIssueRecord(java.lang.Integer id, java.lang.Integer areaId, java.lang.Integer policyId, java.lang.String adminNotice, org.liquidfeedback.generated.enums.IssueState state, java.sql.Timestamp phaseFinished, java.sql.Timestamp created, java.sql.Timestamp accepted, java.sql.Timestamp halfFrozen, java.sql.Timestamp fullyFrozen, java.sql.Timestamp closed, java.sql.Timestamp cleaned, java.lang.Object admissionTime, java.lang.Object discussionTime, java.lang.Object verificationTime, java.lang.Object votingTime, java.sql.Timestamp snapshot, org.liquidfeedback.generated.enums.SnapshotEvent latestSnapshotEvent, java.lang.Integer population, java.lang.Integer voterCount, java.lang.Integer statusQuoSchulzeRank) {
		super(org.liquidfeedback.generated.tables.OpenIssue.OPEN_ISSUE);

		setValue(0, id);
		setValue(1, areaId);
		setValue(2, policyId);
		setValue(3, adminNotice);
		setValue(4, state);
		setValue(5, phaseFinished);
		setValue(6, created);
		setValue(7, accepted);
		setValue(8, halfFrozen);
		setValue(9, fullyFrozen);
		setValue(10, closed);
		setValue(11, cleaned);
		setValue(12, admissionTime);
		setValue(13, discussionTime);
		setValue(14, verificationTime);
		setValue(15, votingTime);
		setValue(16, snapshot);
		setValue(17, latestSnapshotEvent);
		setValue(18, population);
		setValue(19, voterCount);
		setValue(20, statusQuoSchulzeRank);
	}
}
