/**
 * This class is generated by jOOQ
 */
package org.liquidfeedback.generated.tables.daos;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.4" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyDao extends org.jooq.impl.DAOImpl<org.liquidfeedback.generated.tables.records.PolicyRecord, org.liquidfeedback.generated.tables.pojos.Policy, java.lang.Integer> {

	/**
	 * Create a new PolicyDao without any configuration
	 */
	public PolicyDao() {
		super(org.liquidfeedback.generated.tables.Policy.POLICY, org.liquidfeedback.generated.tables.pojos.Policy.class);
	}

	/**
	 * Create a new PolicyDao with an attached configuration
	 */
	public PolicyDao(org.jooq.Configuration configuration) {
		super(org.liquidfeedback.generated.tables.Policy.POLICY, org.liquidfeedback.generated.tables.pojos.Policy.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected java.lang.Integer getId(org.liquidfeedback.generated.tables.pojos.Policy object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchById(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public org.liquidfeedback.generated.tables.pojos.Policy fetchOneById(java.lang.Integer value) {
		return fetchOne(org.liquidfeedback.generated.tables.Policy.POLICY.ID, value);
	}

	/**
	 * Fetch records that have <code>index IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIndex(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INDEX, values);
	}

	/**
	 * Fetch records that have <code>active IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByActive(java.lang.Boolean... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.ACTIVE, values);
	}

	/**
	 * Fetch records that have <code>name IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByName(java.lang.String... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.NAME, values);
	}

	/**
	 * Fetch a unique record that has <code>name = value</code>
	 */
	public org.liquidfeedback.generated.tables.pojos.Policy fetchOneByName(java.lang.String value) {
		return fetchOne(org.liquidfeedback.generated.tables.Policy.POLICY.NAME, value);
	}

	/**
	 * Fetch records that have <code>description IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDescription(java.lang.String... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DESCRIPTION, values);
	}

	/**
	 * Fetch records that have <code>polling IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByPolling(java.lang.Boolean... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.POLLING, values);
	}

	/**
	 * Fetch records that have <code>admission_time IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByAdmissionTime(java.lang.Object... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.ADMISSION_TIME, values);
	}

	/**
	 * Fetch records that have <code>discussion_time IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDiscussionTime(java.lang.Object... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DISCUSSION_TIME, values);
	}

	/**
	 * Fetch records that have <code>verification_time IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByVerificationTime(java.lang.Object... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.VERIFICATION_TIME, values);
	}

	/**
	 * Fetch records that have <code>voting_time IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByVotingTime(java.lang.Object... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.VOTING_TIME, values);
	}

	/**
	 * Fetch records that have <code>issue_quorum_num IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIssueQuorumNum(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.ISSUE_QUORUM_NUM, values);
	}

	/**
	 * Fetch records that have <code>issue_quorum_den IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIssueQuorumDen(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.ISSUE_QUORUM_DEN, values);
	}

	/**
	 * Fetch records that have <code>initiative_quorum_num IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByInitiativeQuorumNum(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INITIATIVE_QUORUM_NUM, values);
	}

	/**
	 * Fetch records that have <code>initiative_quorum_den IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByInitiativeQuorumDen(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INITIATIVE_QUORUM_DEN, values);
	}

	/**
	 * Fetch records that have <code>defeat_strength IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDefeatStrength(org.liquidfeedback.generated.enums.DefeatStrength... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DEFEAT_STRENGTH, values);
	}

	/**
	 * Fetch records that have <code>tie_breaking IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByTieBreaking(org.liquidfeedback.generated.enums.TieBreaking... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.TIE_BREAKING, values);
	}

	/**
	 * Fetch records that have <code>direct_majority_num IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDirectMajorityNum(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DIRECT_MAJORITY_NUM, values);
	}

	/**
	 * Fetch records that have <code>direct_majority_den IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDirectMajorityDen(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DIRECT_MAJORITY_DEN, values);
	}

	/**
	 * Fetch records that have <code>direct_majority_strict IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDirectMajorityStrict(java.lang.Boolean... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DIRECT_MAJORITY_STRICT, values);
	}

	/**
	 * Fetch records that have <code>direct_majority_positive IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDirectMajorityPositive(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DIRECT_MAJORITY_POSITIVE, values);
	}

	/**
	 * Fetch records that have <code>direct_majority_non_negative IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByDirectMajorityNonNegative(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.DIRECT_MAJORITY_NON_NEGATIVE, values);
	}

	/**
	 * Fetch records that have <code>indirect_majority_num IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIndirectMajorityNum(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INDIRECT_MAJORITY_NUM, values);
	}

	/**
	 * Fetch records that have <code>indirect_majority_den IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIndirectMajorityDen(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INDIRECT_MAJORITY_DEN, values);
	}

	/**
	 * Fetch records that have <code>indirect_majority_strict IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIndirectMajorityStrict(java.lang.Boolean... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INDIRECT_MAJORITY_STRICT, values);
	}

	/**
	 * Fetch records that have <code>indirect_majority_positive IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIndirectMajorityPositive(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INDIRECT_MAJORITY_POSITIVE, values);
	}

	/**
	 * Fetch records that have <code>indirect_majority_non_negative IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByIndirectMajorityNonNegative(java.lang.Integer... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.INDIRECT_MAJORITY_NON_NEGATIVE, values);
	}

	/**
	 * Fetch records that have <code>no_reverse_beat_path IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByNoReverseBeatPath(java.lang.Boolean... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.NO_REVERSE_BEAT_PATH, values);
	}

	/**
	 * Fetch records that have <code>no_multistage_majority IN (values)</code>
	 */
	public java.util.List<org.liquidfeedback.generated.tables.pojos.Policy> fetchByNoMultistageMajority(java.lang.Boolean... values) {
		return fetch(org.liquidfeedback.generated.tables.Policy.POLICY.NO_MULTISTAGE_MAJORITY, values);
	}
}
