/**
 * This class is generated by jOOQ
 */
package org.liquidfeedback.generated.tables.records;

/**
 * This class is generated by jOOQ.
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.4.4" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyRecord extends org.jooq.impl.UpdatableRecordImpl<org.liquidfeedback.generated.tables.records.PolicyRecord> implements org.liquidfeedback.generated.tables.interfaces.IPolicy {

	private static final long serialVersionUID = -1095914126;

	/**
	 * Setter for <code>policy.id</code>.
	 */
	public void setId(java.lang.Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>policy.id</code>.
	 */
	@Override
	public java.lang.Integer getId() {
		return (java.lang.Integer) getValue(0);
	}

	/**
	 * Setter for <code>policy.index</code>.
	 */
	public void setIndex(java.lang.Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>policy.index</code>.
	 */
	@Override
	public java.lang.Integer getIndex() {
		return (java.lang.Integer) getValue(1);
	}

	/**
	 * Setter for <code>policy.active</code>.
	 */
	public void setActive(java.lang.Boolean value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>policy.active</code>.
	 */
	@Override
	public java.lang.Boolean getActive() {
		return (java.lang.Boolean) getValue(2);
	}

	/**
	 * Setter for <code>policy.name</code>.
	 */
	public void setName(java.lang.String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>policy.name</code>.
	 */
	@Override
	public java.lang.String getName() {
		return (java.lang.String) getValue(3);
	}

	/**
	 * Setter for <code>policy.description</code>.
	 */
	public void setDescription(java.lang.String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>policy.description</code>.
	 */
	@Override
	public java.lang.String getDescription() {
		return (java.lang.String) getValue(4);
	}

	/**
	 * Setter for <code>policy.polling</code>.
	 */
	public void setPolling(java.lang.Boolean value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>policy.polling</code>.
	 */
	@Override
	public java.lang.Boolean getPolling() {
		return (java.lang.Boolean) getValue(5);
	}

	/**
	 * Setter for <code>policy.admission_time</code>.
	 */
	public void setAdmissionTime(java.lang.Object value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>policy.admission_time</code>.
	 */
	@Override
	public java.lang.Object getAdmissionTime() {
		return (java.lang.Object) getValue(6);
	}

	/**
	 * Setter for <code>policy.discussion_time</code>.
	 */
	public void setDiscussionTime(java.lang.Object value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>policy.discussion_time</code>.
	 */
	@Override
	public java.lang.Object getDiscussionTime() {
		return (java.lang.Object) getValue(7);
	}

	/**
	 * Setter for <code>policy.verification_time</code>.
	 */
	public void setVerificationTime(java.lang.Object value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>policy.verification_time</code>.
	 */
	@Override
	public java.lang.Object getVerificationTime() {
		return (java.lang.Object) getValue(8);
	}

	/**
	 * Setter for <code>policy.voting_time</code>.
	 */
	public void setVotingTime(java.lang.Object value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>policy.voting_time</code>.
	 */
	@Override
	public java.lang.Object getVotingTime() {
		return (java.lang.Object) getValue(9);
	}

	/**
	 * Setter for <code>policy.issue_quorum_num</code>.
	 */
	public void setIssueQuorumNum(java.lang.Integer value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>policy.issue_quorum_num</code>.
	 */
	@Override
	public java.lang.Integer getIssueQuorumNum() {
		return (java.lang.Integer) getValue(10);
	}

	/**
	 * Setter for <code>policy.issue_quorum_den</code>.
	 */
	public void setIssueQuorumDen(java.lang.Integer value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>policy.issue_quorum_den</code>.
	 */
	@Override
	public java.lang.Integer getIssueQuorumDen() {
		return (java.lang.Integer) getValue(11);
	}

	/**
	 * Setter for <code>policy.initiative_quorum_num</code>.
	 */
	public void setInitiativeQuorumNum(java.lang.Integer value) {
		setValue(12, value);
	}

	/**
	 * Getter for <code>policy.initiative_quorum_num</code>.
	 */
	@Override
	public java.lang.Integer getInitiativeQuorumNum() {
		return (java.lang.Integer) getValue(12);
	}

	/**
	 * Setter for <code>policy.initiative_quorum_den</code>.
	 */
	public void setInitiativeQuorumDen(java.lang.Integer value) {
		setValue(13, value);
	}

	/**
	 * Getter for <code>policy.initiative_quorum_den</code>.
	 */
	@Override
	public java.lang.Integer getInitiativeQuorumDen() {
		return (java.lang.Integer) getValue(13);
	}

	/**
	 * Setter for <code>policy.defeat_strength</code>.
	 */
	public void setDefeatStrength(org.liquidfeedback.generated.enums.DefeatStrength value) {
		setValue(14, value);
	}

	/**
	 * Getter for <code>policy.defeat_strength</code>.
	 */
	@Override
	public org.liquidfeedback.generated.enums.DefeatStrength getDefeatStrength() {
		return (org.liquidfeedback.generated.enums.DefeatStrength) getValue(14);
	}

	/**
	 * Setter for <code>policy.tie_breaking</code>.
	 */
	public void setTieBreaking(org.liquidfeedback.generated.enums.TieBreaking value) {
		setValue(15, value);
	}

	/**
	 * Getter for <code>policy.tie_breaking</code>.
	 */
	@Override
	public org.liquidfeedback.generated.enums.TieBreaking getTieBreaking() {
		return (org.liquidfeedback.generated.enums.TieBreaking) getValue(15);
	}

	/**
	 * Setter for <code>policy.direct_majority_num</code>.
	 */
	public void setDirectMajorityNum(java.lang.Integer value) {
		setValue(16, value);
	}

	/**
	 * Getter for <code>policy.direct_majority_num</code>.
	 */
	@Override
	public java.lang.Integer getDirectMajorityNum() {
		return (java.lang.Integer) getValue(16);
	}

	/**
	 * Setter for <code>policy.direct_majority_den</code>.
	 */
	public void setDirectMajorityDen(java.lang.Integer value) {
		setValue(17, value);
	}

	/**
	 * Getter for <code>policy.direct_majority_den</code>.
	 */
	@Override
	public java.lang.Integer getDirectMajorityDen() {
		return (java.lang.Integer) getValue(17);
	}

	/**
	 * Setter for <code>policy.direct_majority_strict</code>.
	 */
	public void setDirectMajorityStrict(java.lang.Boolean value) {
		setValue(18, value);
	}

	/**
	 * Getter for <code>policy.direct_majority_strict</code>.
	 */
	@Override
	public java.lang.Boolean getDirectMajorityStrict() {
		return (java.lang.Boolean) getValue(18);
	}

	/**
	 * Setter for <code>policy.direct_majority_positive</code>.
	 */
	public void setDirectMajorityPositive(java.lang.Integer value) {
		setValue(19, value);
	}

	/**
	 * Getter for <code>policy.direct_majority_positive</code>.
	 */
	@Override
	public java.lang.Integer getDirectMajorityPositive() {
		return (java.lang.Integer) getValue(19);
	}

	/**
	 * Setter for <code>policy.direct_majority_non_negative</code>.
	 */
	public void setDirectMajorityNonNegative(java.lang.Integer value) {
		setValue(20, value);
	}

	/**
	 * Getter for <code>policy.direct_majority_non_negative</code>.
	 */
	@Override
	public java.lang.Integer getDirectMajorityNonNegative() {
		return (java.lang.Integer) getValue(20);
	}

	/**
	 * Setter for <code>policy.indirect_majority_num</code>.
	 */
	public void setIndirectMajorityNum(java.lang.Integer value) {
		setValue(21, value);
	}

	/**
	 * Getter for <code>policy.indirect_majority_num</code>.
	 */
	@Override
	public java.lang.Integer getIndirectMajorityNum() {
		return (java.lang.Integer) getValue(21);
	}

	/**
	 * Setter for <code>policy.indirect_majority_den</code>.
	 */
	public void setIndirectMajorityDen(java.lang.Integer value) {
		setValue(22, value);
	}

	/**
	 * Getter for <code>policy.indirect_majority_den</code>.
	 */
	@Override
	public java.lang.Integer getIndirectMajorityDen() {
		return (java.lang.Integer) getValue(22);
	}

	/**
	 * Setter for <code>policy.indirect_majority_strict</code>.
	 */
	public void setIndirectMajorityStrict(java.lang.Boolean value) {
		setValue(23, value);
	}

	/**
	 * Getter for <code>policy.indirect_majority_strict</code>.
	 */
	@Override
	public java.lang.Boolean getIndirectMajorityStrict() {
		return (java.lang.Boolean) getValue(23);
	}

	/**
	 * Setter for <code>policy.indirect_majority_positive</code>.
	 */
	public void setIndirectMajorityPositive(java.lang.Integer value) {
		setValue(24, value);
	}

	/**
	 * Getter for <code>policy.indirect_majority_positive</code>.
	 */
	@Override
	public java.lang.Integer getIndirectMajorityPositive() {
		return (java.lang.Integer) getValue(24);
	}

	/**
	 * Setter for <code>policy.indirect_majority_non_negative</code>.
	 */
	public void setIndirectMajorityNonNegative(java.lang.Integer value) {
		setValue(25, value);
	}

	/**
	 * Getter for <code>policy.indirect_majority_non_negative</code>.
	 */
	@Override
	public java.lang.Integer getIndirectMajorityNonNegative() {
		return (java.lang.Integer) getValue(25);
	}

	/**
	 * Setter for <code>policy.no_reverse_beat_path</code>.
	 */
	public void setNoReverseBeatPath(java.lang.Boolean value) {
		setValue(26, value);
	}

	/**
	 * Getter for <code>policy.no_reverse_beat_path</code>.
	 */
	@Override
	public java.lang.Boolean getNoReverseBeatPath() {
		return (java.lang.Boolean) getValue(26);
	}

	/**
	 * Setter for <code>policy.no_multistage_majority</code>.
	 */
	public void setNoMultistageMajority(java.lang.Boolean value) {
		setValue(27, value);
	}

	/**
	 * Getter for <code>policy.no_multistage_majority</code>.
	 */
	@Override
	public java.lang.Boolean getNoMultistageMajority() {
		return (java.lang.Boolean) getValue(27);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public org.jooq.Record1<java.lang.Integer> key() {
		return (org.jooq.Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PolicyRecord
	 */
	public PolicyRecord() {
		super(org.liquidfeedback.generated.tables.Policy.POLICY);
	}

	/**
	 * Create a detached, initialised PolicyRecord
	 */
	public PolicyRecord(java.lang.Integer id, java.lang.Integer index, java.lang.Boolean active, java.lang.String name, java.lang.String description, java.lang.Boolean polling, java.lang.Object admissionTime, java.lang.Object discussionTime, java.lang.Object verificationTime, java.lang.Object votingTime, java.lang.Integer issueQuorumNum, java.lang.Integer issueQuorumDen, java.lang.Integer initiativeQuorumNum, java.lang.Integer initiativeQuorumDen, org.liquidfeedback.generated.enums.DefeatStrength defeatStrength, org.liquidfeedback.generated.enums.TieBreaking tieBreaking, java.lang.Integer directMajorityNum, java.lang.Integer directMajorityDen, java.lang.Boolean directMajorityStrict, java.lang.Integer directMajorityPositive, java.lang.Integer directMajorityNonNegative, java.lang.Integer indirectMajorityNum, java.lang.Integer indirectMajorityDen, java.lang.Boolean indirectMajorityStrict, java.lang.Integer indirectMajorityPositive, java.lang.Integer indirectMajorityNonNegative, java.lang.Boolean noReverseBeatPath, java.lang.Boolean noMultistageMajority) {
		super(org.liquidfeedback.generated.tables.Policy.POLICY);

		setValue(0, id);
		setValue(1, index);
		setValue(2, active);
		setValue(3, name);
		setValue(4, description);
		setValue(5, polling);
		setValue(6, admissionTime);
		setValue(7, discussionTime);
		setValue(8, verificationTime);
		setValue(9, votingTime);
		setValue(10, issueQuorumNum);
		setValue(11, issueQuorumDen);
		setValue(12, initiativeQuorumNum);
		setValue(13, initiativeQuorumDen);
		setValue(14, defeatStrength);
		setValue(15, tieBreaking);
		setValue(16, directMajorityNum);
		setValue(17, directMajorityDen);
		setValue(18, directMajorityStrict);
		setValue(19, directMajorityPositive);
		setValue(20, directMajorityNonNegative);
		setValue(21, indirectMajorityNum);
		setValue(22, indirectMajorityDen);
		setValue(23, indirectMajorityStrict);
		setValue(24, indirectMajorityPositive);
		setValue(25, indirectMajorityNonNegative);
		setValue(26, noReverseBeatPath);
		setValue(27, noMultistageMajority);
	}
}
